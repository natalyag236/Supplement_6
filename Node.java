/**
 * Represents a node in a binary tree with a unique node ID, data, 
 * and references to its left and right children.
 * 
 * Each node has a unique nodeID generated by a static counter that is 
 * incremented whenever a new node is created.
 */
public class Node {
    private static int idCounter = 0;  
    private int nodeID;
    private int data;
    private Node left;
    private Node right;
    /**
    * Constructs a new Node with the specified data.
    * 
    * The node ID is automatically assigned based on the static idCounter,
    * and the left and right children are initialized to null.
    * 
    * @param data The data to store in the node.
    */

    public Node(int data) {
        this.nodeID = idCounter++;  
        this.data = data;
        this.left = null;
        this.right = null;
    }

    public int getNodeID() {
        return nodeID;
    }
    /**
    * Returns the data stored in the node.
    * 
    * @return The data stored in the node.
    */
    public int getData() {
        return data;
    }

    /**
     * Sets the data for the node.
     * 
     * @param data The data to set for the node.
     */
    public void setData(int data) {
        this.data = data;
    }
    /**
    * Returns the left child node.
    * 
    * @return The left child node, or null if no left child exists.
    */
    public Node getLeft() {
        return left;
    }
     /**
     * Sets the left child node.
     * 
     * @param left The node to set as the left child.
     */

    public void setLeft(Node left) {
        this.left = left;
    }
    /**
     * Returns the right child node.
     * 
     * @return The right child node, or null if no right child exists.
     */

    public Node getRight() {
        return right;
    }
    /**
     * Sets the right child node.
     * 
     * @param right The node to set as the right child.
     */

    public void setRight(Node right) {
        this.right = right;
    }
    public void insert(int value) {
        if (value < this.data) {
            if (this.left == null) {
                this.left = new Node(value);  // Create a new node and assign it to the left child
            } else {
                this.left.insert(value);  // Recursively insert into the left child
            }
        } else {
            if (this.right == null) {
                this.right = new Node(value);  // Create a new node and assign it to the right child
            } else {
                this.right.insert(value);  // Recursively insert into the right child
            }
        }
}   }
